<?xml version="1.0" encoding="utf-8"?>
<Controller xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://glue.seanhess.net/2009" xmlns:control="books.control.*" xmlns:view="books.view.*" xmlns:browse="books.view.browse.*" xmlns:pages="books.view.pages.*" xmlns:model="books.model.*">

	<mx:Script>
		<![CDATA[
			import books.model.Book;
			import mx.events.FlexEvent;
		]]>
	</mx:Script>
	
	<model:Library id="library"/>
	
	<Glue>
		<control:Browse id="browse"/>	
		<Inject books="{library.books}"/>
	</Glue>
	
	<Glue>
		<control:Search id="search"/>
		<Inject 
			allBooks="{library.books}"
			allAuthors="{library.authors}"
		/>
	</Glue>
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- 
		VIEWS 
		
		There should normally be one Glue for each view you care about. 
		It will glue every view of that type, so if you use a component, 
		instead of a view, all of them will get the same glue. 
		
		The View is declared as the first child of the glue. If you do 
		this, it throws the one you create away, and replaces it with the
		currently matched view. It sets the selector's match property to
		the classname of the view for you. In other words, this is some 
		magic to get you autocompletion, but the instance you are working
		on will always be replaced with the right one (if you follow 
		conventions). 
				
		If you want to target a specific instance of a component, you 
		can use Bifff's selectors (bifff.seanhess.net). For example, you
		could say <Glue match="ResultsPage#main"> and it would target the
		results page with an id of main. 
		
	 	BEST PRACTICE: Only specify injections and observes that set or 
	 	call something on the view in question. Views should never target
	 	other views. The target property is to say which controller to
	 	listen to, or to drill into an unencapsulated view.  
		
		
		
		================================================================
		
		MainView
		
		I am using it's creation complete to initialize the app
		MainView has some encapsulated events, so we'll use the constants
		instead of typing the event names. 
		
		==================================================================
		
		MainPagesView
		
		Notice how I am reusing the ResultsPage component and injecting
		different results into both browse and search
		
		You can encapsulate views as much as you want. If you don't, 
		you can reach into them using the target attribute, like I've 
		done with back, browseResults and searchResults. 
		
		I set up observe tags to listen to the view (like the back 
		click handler), and to respond to a controller action
		in the view. The second usage makes it so I can call the 
		controller from anywhere, and this view will get updated. 
		
		It should be considered bad practice to target another view
		with an observe tag. Any injector target should be something
		inside the view.
		
		Play around with it. Notice the auto-complete!
		
		Inject will throw a runtime error if the target doesn't 
		have the runtime property it is trying to inject to. 
	-->
	<Glue>
		<view:MainView id="mainView"/>
		<Route event="{FlexEvent.CREATION_COMPLETE}" call="library.mock()"/>
		<Route event="{MainView.SEARCH}" call="browse.showSearch()"/>
		<Route event="{MainView.BROWSE}" call="browse.showBrowse()"/>
	</Glue>

	<Glue>
		<view:MainPagesView id="pages"/>
		
		<Inject child="{pages.back}" visible="{browse.backEnabled}"/>
		<Inject child="{pages.browseResults}" books="{library.books}" authors="{library.authors}"/>
		<Inject child="{pages.searchResults}" books="{search.bookResults}" authors="{search.authorResults}"/>
		
		<Route child="{pages.back}" event="click" call="browse.goBack()"/>
		
		<Observe model="{browse}" event="goBack" call="pages.goBack()"/>
		<Observe model="{browse}" event="showSearch" call="pages.showSearch()"/>
		<Observe model="{browse}" event="showBrowse" call="pages.showBrowse()"/>
		<Observe model="{browse}" event="showBook" call="pages.showBook()"/>
		<Observe model="{browse}" event="showAuthor" call="pages.showAuthor()"/>
		
		<Observe model="{search}" event="search" call="pages.showSearchResults()"/>
	</Glue>
	
	<Glue>
		<pages:ResultsPage id="results"/>
		<Route event="{ResultsPage.SELECT_BOOK}" call="browse.showBook(results.selectedBook)"/>
		<Route event="{ResultsPage.SELECT_AUTHOR}" call="browse.showAuthor(results.selectedAuthor)"/>
	</Glue>
	
	<!-- 
		I could use MouseEvent.click instead of click here if I cared
	-->
	<Glue>
		<pages:BookPage id="bookView"/>
		<Inject book="{browse.currentBook}"/>
		<Route child="{bookView.authorButton}" event="click" call="browse.showAuthor(bookView.book.author)"/>
	</Glue>
	
	<Glue>
		<pages:AuthorPage id="authorView"/>	
		<Inject author="{browse.currentAuthor}"/>
		<Route child="{authorView.booksList}" event="itemClick" call="browse.showBook(authorView.booksList.selectedItem as Book)"/>
	</Glue>
	
	<Glue>
		<pages:SearchPage id="searchView"/>
		<Route child="{searchView.searchBtn}" event="click" call="search.search(searchView.input.text)"/>
	</Glue>

</Controller>