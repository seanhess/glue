<?xml version="1.0" encoding="utf-8"?>
<mx:Object xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:model="login.model.*" xmlns:service="login.service.*" xmlns="http://glue.seanhess.net/2009">

	<!--
		This controller is responsible for invoking services and
		manipulating models. 
	-->

	<!-- Models: These are injected -->
	<model:Application id="app"/>
	<model:Navigation id="nav"/>

	<!-- Services: Either injected or created. -->
	<service:ParseAuthResponses id="parser"/>
	
	<!-- These tags make it so we can listen to any service that is injected with minimal code -->
	<Respond id="respondLogin"  result="onLogin(event.source)"/>
	<Respond id="respondLogout" result="onLogout(event.source)"/>

	<mx:Script>
		<![CDATA[
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import login.model.Login;
			import login.model.User;
			
			// These are injected in from the glue
			[Bindable] public var loginService:HTTPService;	
			[Bindable] public var logoutService:HTTPService;
			
			private var currentAttempt:Login;
		
			public function login(value:Login):void
			{
				currentAttempt = value;
				currentAttempt.start();
				respondLogin.start(loginService);
				loginService.send({username:currentAttempt.username, password:currentAttempt.password});
			}
			
			public function logout():void
			{
				respondLogout.start(logoutService);
				logoutService.send(); 
			}
			
			private function onLogin(event:ResultEvent):void
			{
				currentAttempt.waiting = false;
				var user:User = parser.parseLoginResponse(event.result);
				
				if (user.valid)
				{
					app.currentUser = user;
					nav.loggedIn();
				}
				else
				{
					currentAttempt.failed = true;
					onLogout(null);
				}
			}
			
			private function onLogout(event:Event):void
			{
				currentAttempt = null;
				app.currentUser = null;
				nav.loggedOut();
			}
		]]>
	</mx:Script>

</mx:Object>
